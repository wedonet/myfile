安装必须组件
yum install gc 
yum install gcc 
yum install gcc-c++ 
yum install pcre-devel 
yum install zlib-devel 
yum install openssl-devel
yum install
yum install
yum install
yum install
yum install
yum install
yum install
yum install
yum install
yum install
yum install
yum install
yum install
yum install
yum install
yum install
yum install


创建群组
groupadd nginx

创建一个用户，不允许登陆和不创主目录
useradd -s /sbin/nologin -g nginx -M nginx

上传文件到 /usr/src目录

解压
tar zxvf nginx-1.7.8.tar.gz

编译基本能运行的nginx
./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module


**
带echo模块的configure
./configure --user=nginx --group=nginx --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --add-module=/usr/local/src/download/echo-nginx-module-0.61


make
make install



# 查询nginx进程：
ps aux|grep nginx


# 控制nginx服务的命令
1、启动：nginx
2、停止：nginx -s stop
3、退出：nginx -s quit
4、重启：nginx -s reopen
5、重新加载：nginx -s reload
6、平滑启动：kill -HUP pid（kill -HUP `cat /var/run/nginx.pid`）



#报"/usr/local/nginx/logs/nginx.pid" failed (2: No such file or directory)，进到logs文件发现的确没有nginx.pid文件

解决方法：

　　[root@localhost nginx]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf

　　使用nginx -c的参数指定nginx.conf文件的位置

　　[root@localhost nginx]# cd logs/

　　[root@localhost logs]# ll

　　总用量 12

　　-rw-r--r-- 1 root root 1246 12月 9 18:10 access.log

　　-rw-r--r-- 1 root root 516 12月 10 15:39 error.log

　　-rw-r--r-- 1 root root 5 12月 10 15:38 nginx.pid

　　看nginx.pid文件已经有了。











也可编写nginx角本

成功安装后，添加service服务脚本

CentOS 7的服务systemctl脚本存放在：/usr/lib/systemd/，有系统（system）和用户（user）之分，像需要开机不登陆就能运行的程序，还是存在系统服务里吧，即：/usr/lib/systemd/system目录下

编写nginx.service文件，内容如下（注意各个路径，pid路径要和nginx配置文件pid一致，否则启动报错）

[Unit]
Description=nginx
Documentation=http://nginx.org/en/docs/
After=network.target


[Service]
Type=forking
ExecStart=/usr/local/nginx/sbin/nginx
ExecReload=/usr/local/nginx/sbin/nginx -s reload
ExecStop=/usr/local/nginx/sbin/nginx -s quit
PrivateTmp=true


PrivateTmp=true


[Install]
WantedBy=multi-user.target







启动nginx

命令systemctl status nginx.service查看nginx启动状态。

命令v启动nginx。

命令systemctl stop nginx.service停止nginx。

启动后，在浏览器输入http://192.168.195.130看是否能进入nginx欢迎页面，如果进入发现System.NET.Sockets.SocketException 由于目标计算机积极拒绝，无法连接。 192.168.195.130:80

则是由于防火墙的原因，关闭防火墙即可，systemctl stop firewalld.service

若是不想关闭防火墙，添加相应端口也可以，firewall-cmd --zone=public --add-port=80/tcp --permanent （permanent为永久添加，重启还有）

查询端口：firewall-cmd --permanent --query-port=80/tcp













#查看ngin进程和端口号

# netstat -ntlp | grep nginx
tcp        0      0 0.0.0.0:80              0.0.0.0:*              LISTEN      4415/nginx: master










[Unit]:服务的说明
Description:描述服务
After:描述服务类别
[Service]服务运行参数的设置
Type=forking是后台运行的形式
ExecStart为服务的具体运行命令
ExecReload为重启命令
ExecStop为停止命令
PrivateTmp=True表示给服务分配独立的临时空间
注意：[Service]的启动、重启、停止命令全部要求使用绝对路径
[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3
保存退出。
2.设置开机启动
1	systemctl enable nginx.service
3.其他命令
启动nginx服务
1	systemctl start nginx.service
设置开机自启动
	systemctl enable nginx.service
停止开机自启动
1	systemctl disable nginx.service
查看服务当前状态
	systemctl status nginx.service
重新启动服务
1	systemctl restart nginx.service
查看所有已启动的服务
	systemctl list-units --type=service
4.Systemd 命令和 sysvinit 命令的对照表

5.Sysvinit 运行级别和 systemd 目标的对应表








原文地址：http://www.dohooe.com/2016/03/03/352.html?utm_source=tuicool&utm_medium=referral





如何使NGINX配置生效

    1

    检查配置是否正确

    修改完配置后，最好使用命令检查下配置是否正确，这样可以排除配置格式错误导致配置不生效，影响服务器的稳定运行。

    nginx -t

    2

    配置生效

    修改配置后需要重启NGINX才能生效，如果关闭NGINX再打开会影响服务运行，我们可以向Nginx 发送信号，平滑重启。

    kill -HUP 进程号

    其中进程号是NGINX的进程号，可以使用ps aux | grep nginx 命令查看。

    或者使用下面的命令使配置生效

    nginx -s reload


  













#nginx 配置多站点




#nginx 常用方法

		#查看我的ip地址
		echo_after_body 我的地址：$server_addr <br />;

		#查看从哪跳过来的
		echo_after_body  从这来的：  $remote_addr <br />;

		#查看跳转到哪去了
		echo_after_body  到这去： $upstream_addr <br />;




如何检测配置文件的正确性



用参数-t
nginx -t
如果返回ok,用  -s reload 重新加载配置文件






设备的状态有: 
1.down 表示单前的server暂时不参与负载 
2.weight 权重,默认为1。 weight越大，负载的权重就越大。 
3.max_fails 允许请求失败的次数默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误 
4.fail_timeout max_fails次失败后，暂停的时间。 
5.backup 备用服务器, 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。

